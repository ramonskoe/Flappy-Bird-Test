1. Title: html

<!DOCTYPE html> <html lang="de"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Flappy Bird Clone</title> <link rel="stylesheet" href="style.css"> <link rel="manifest" href="manifest.json"> <script src="game.js" defer></script> </head> <body> <h1>Flappy Bird Clone</h1> <canvas id="gameCanvas" width="320" height="480"></canvas> <script> if ("serviceWorker" in navigator) { navigator.serviceWorker.register("service-worker.js"); } </script> </body> </html>

2. Title: JavaScript

const canvas = document.getElementById("gameCanvas"); const ctx = canvas.getContext("2d"); let bird = { x: 50, y: 150, width: 20, height: 20, velocity: 0, gravity: 0.6 }; let pipes = []; let pipeWidth = 50, pipeGap = 100, pipeSpeed = 2; let score = 0; let gameRunning = true; document.addEventListener("touchstart", () => { bird.velocity = -8; }); document.addEventListener("keydown", (e) => { if (e.code === "Space") bird.velocity = -8; }); function update() { if (!gameRunning) return; bird.velocity += bird.gravity; bird.y += bird.velocity; if (pipes.length === 0 || pipes[pipes.length - 1].x < canvas.width - 150) { let pipeY = Math.random() * (canvas.height - pipeGap - 100) + 50; pipes.push({ x: canvas.width, y: pipeY }); } for (let pipe of pipes) { pipe.x -= pipeSpeed; if ( bird.x < pipe.x + pipeWidth && bird.x + bird.width > pipe.x && (bird.y < pipe.y || bird.y + bird.height > pipe.y + pipeGap) ) { gameRunning = false; } if (pipe.x + pipeWidth === bird.x) score++; } if (bird.y > canvas.height || bird.y < 0) gameRunning = false; } function draw() { ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = "yellow"; ctx.fillRect(bird.x, bird.y, bird.width, bird.height); ctx.fillStyle = "green"; for (let pipe of pipes) { ctx.fillRect(pipe.x, 0, pipeWidth, pipe.y); ctx.fillRect(pipe.x, pipe.y + pipeGap, pipeWidth, canvas.height); } ctx.fillStyle = "black"; ctx.font = "20px Arial"; ctx.fillText(`Score: ${score}`, 10, 30); } function gameLoop() { update(); draw(); requestAnimationFrame(gameLoop); } gameLoop();

3. Title: json

{ "name": "Flappy Bird Clone", "short_name": "Flappy Bird", "start_url": "index.html", "display": "standalone", "background_color": "#ffffff", "theme_color": "#000000", "icons": [ { "src": "icon.png", "sizes": "192x192", "type": "image/png" }, { "src": "icon.png", "sizes": "512x512", "type": "image/png" } ] }

4. Title: JavaScript

self.addEventListener("install", (event) => { event.waitUntil( caches.open("flappy-bird-cache").then((cache) => { return cache.addAll([ "index.html", "game.js", "style.css", "manifest.json", "icon.png" ]); }) ); }); self.addEventListener("fetch", (event) => { event.respondWith( caches.match(event.request).then((response) => { return response || fetch(event.request); }) ); });

5. Title: css

body { text-align: center; background-color: skyblue; font-family: Arial, sans-serif; } canvas { background-color: white; border: 2px solid black; }

